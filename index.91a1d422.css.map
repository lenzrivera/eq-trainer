{"mappings":"ACAA,sFAKA,mGAMA,iCC4DI,yKCtEA,sQAcC,oDAIA,8DCmBD,kHCuCQ,yCAKA,mLAYP,0GAYO,8CAEP,4MAYA,+CAMO,yBAEP,6FAUA,qCAMO,uCC1IR,4JCaA,yCEwGA,oJASC,qKAoBD,0CAMA,sGAKC,6FAWD,gHC5JA,+GAQA,0FAMA,uDAGC,kDC9BD,6RCIA,gEAMA,wEAKA","sources":["index.91a1d422.css","src/global.css","src/App.svelte","src/components/Button.svelte","src/components/FrequencyPicker.svelte","src/components/FrequencyDisplay.svelte","src/components/Markings.svelte","src/components/Wave.svelte","src/components/Wave2.svelte","src/components/Slider.svelte","src/components/ResultModal.svelte","src/components/Modal.svelte","src/components/StartModal.svelte"],"sourcesContent":["@font-face {\n  font-family: Raleway;\n  src: url(\"Raleway-Regular.8259b5d9.ttf\");\n}\n\n@font-face {\n  font-family: Raleway;\n  font-weight: bold;\n  src: url(\"Raleway-Bold.2f500271.ttf\");\n}\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n}\n\n.game_screen.svelte-1fwxmr8 {\n  height: 100vh;\n  background-color: #f5f5f5;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 2.5em;\n  display: flex;\n  overflow: hidden;\n}\n\n.button.svelte-1cevx6t {\n  color: #fff;\n  text-shadow: 0 0 .3rem #ffffff80;\n  background-color: #6e6e6e;\n  border: none;\n  border-radius: .35rem;\n  padding: .9em 2.2em;\n  font-family: Raleway, sans-serif;\n  font-size: 1.1em;\n  transition: scale 50ms ease-in-out;\n  box-shadow: inset 0 0 .35rem #b4b4b4bf;\n}\n\n.button.svelte-1cevx6t:hover {\n  filter: brightness(1.1);\n}\n\n.button.svelte-1cevx6t:active {\n  filter: brightness(.8);\n  scale: .95;\n}\n\n.frequency_picker.svelte-4zflup {\n  width: min(85vw, 83rem);\n  height: 17rem;\n  flex-direction: column;\n  gap: 2.25rem;\n  display: flex;\n}\n\n.audio_viz-lhUWq7 {\n  width: 100%;\n  height: 100%;\n}\n\n.frequency_display-1eq4JI {\n  height: 17rem;\n  background-color: var(--color);\n  border-radius: .35rem;\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  position: relative;\n  overflow: hidden;\n}\n\n.frequency_display-1eq4JI:after {\n  content: \"\";\n  position: absolute;\n  inset: 0;\n  box-shadow: inset 0 0 .8rem #ffffff80;\n}\n\n.frequency_display-1eq4JI > * {\n  position: absolute;\n}\n\n.frequency_text-3ALPXl {\n  color: #fff;\n  text-shadow: 0 0 .2rem #ffffff80;\n  -webkit-user-select: none;\n  user-select: none;\n  font-family: Raleway, sans-serif;\n  font-size: 3.65em;\n  font-weight: bold;\n  transition: opacity .8s ease-out;\n}\n\n.frequency_text-3ALPXl.hidden-2AqiZl {\n  opacity: 0;\n}\n\n.markings-3u7Scn {\n  inset: 0;\n}\n\n.wave-tmxR-U {\n  height: 93%;\n  bottom: 0;\n  left: var(--x);\n  transition: height .5s ease-out;\n  translate: -50%;\n}\n\n.wave-tmxR-U.hidden-2AqiZl {\n  height: 0%;\n}\n\n.wave-tmxR-U.lowered-1gZi9m {\n  height: 55%;\n}\n\n.marking.svelte-hdup9o {\n  width: .25rem;\n  height: 100%;\n  left: var(--x);\n  background: var(--color);\n  box-shadow: 0 0 .25rem 0 var(--color);\n  position: absolute;\n  translate: -50%;\n}\n\nsvg.svelte-1nuqnue {\n  opacity: .9;\n}\n\nsvg.svelte-1nuqnue {\n  opacity: .9;\n}\n\n.slider.svelte-r1t91s {\n  width: 100%;\n  height: .75rem;\n  background-color: #b5b5b5;\n  border-radius: .2rem;\n  position: relative;\n  box-shadow: inset 0 0 .35rem #ffffffbf;\n}\n\n.thumb.svelte-r1t91s {\n  left: var(--x);\n  width: 2.55rem;\n  height: 2.55rem;\n  cursor: pointer;\n  -webkit-tap-highlight-color: transparent;\n  position: absolute;\n  top: 50%;\n  translate: -51% -50%;\n}\n\n.thumb.disabled.svelte-r1t91s {\n  cursor: auto;\n}\n\n.thumb.svelte-r1t91s:before, .thumb.svelte-r1t91s:after {\n  content: \"\";\n  border-radius: 50%;\n  position: absolute;\n}\n\n.thumb.svelte-r1t91s:before {\n  background: #6e6e6e;\n  inset: 0;\n  box-shadow: inset 0 0 .35rem #b4b4b4bf;\n}\n\n.thumb.svelte-r1t91s:after {\n  background: var(--color);\n  box-shadow: inset 0 0 .35rem 0 var(--glow-color);\n  inset: .52rem;\n}\n\n.correct_freq.svelte-tnsfle {\n  text-shadow: 0 0 .3rem #ffffff80;\n  margin-bottom: .175em;\n  font-size: 3em;\n  font-weight: bold;\n}\n\n.dist_stats.svelte-tnsfle {\n  text-shadow: 0 0 .2rem #ffffff80;\n  font-size: 1.5em;\n  font-weight: bold;\n}\n\n.heading.svelte-tnsfle {\n  font-size: 1.5em;\n  font-weight: normal;\n}\n\n.text_container.svelte-tnsfle {\n  margin: 1.25em 0 2em;\n}\n\n.modal.svelte-1k9ivhk {\n  max-width: 26rem;\n  color: #fff;\n  text-align: center;\n  background-color: #060505e8;\n  border-radius: .35rem;\n  flex-direction: column;\n  margin: 1.25rem;\n  padding: 2.75em;\n  font-family: Raleway, sans-serif;\n  display: flex;\n  position: fixed;\n  box-shadow: inset 0 0 .8rem #ffffff80, 0 0 0 100vw #00000050;\n}\n\n.description.svelte-1ftpw63 {\n  margin: 2em 0 1.75em;\n  font-size: 1.2em;\n}\n\n.heading.svelte-1ftpw63 {\n  text-shadow: 0 0 .3rem #ffffff80;\n  font-size: 2.5em;\n}\n\n.link.svelte-1ftpw63 {\n  color: #fff;\n  font-weight: bold;\n}\n\n/*# sourceMappingURL=index.91a1d422.css.map */\n","@font-face {\r\n    font-family: Raleway;\r\n    src: url(/assets/fonts/Raleway/static/Raleway-Regular.ttf);\r\n}\r\n\r\n@font-face {\r\n    font-family: Raleway;\r\n    font-weight: bold;\r\n    src: url(/assets/fonts/Raleway/static/Raleway-Bold.ttf);\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n}","<script>   \r\n    import { MIN_FREQ, MAX_FREQ, genItem } from './js/items';\r\n    import { NoisePlayer } from './js/NoisePlayer';\r\n\r\n    import Button from './components/Button.svelte';\r\n    import FrequencyPicker from './components/FrequencyPicker.svelte';\r\n    import ResultModal from './components/ResultModal.svelte';\r\n    import StartModal from './components/StartModal.svelte';\r\n\r\n    let currentItem = genItem();\r\n    let inputFrequency = 1149;\r\n\r\n    const audioPlayer = new NoisePlayer();\r\n    $: audioPlayer.boostedFrequency = currentItem.boostedFreq;\r\n    audioPlayer.ticked.add(handleAudioTick);\r\n\r\n    let audioRms;\r\n    let audioWaveform;\r\n\r\n    let showStartModal = true;\r\n    let showResultModal = false;\r\n\r\n    let frequencyPicker;\r\n\r\n    // Handlers //\r\n\r\n    async function handleAnswerSelect() {\r\n        if (showStartModal || showResultModal) {\r\n            return;\r\n        }\r\n        \r\n        audioPlayer.stop();\r\n        await waitFor(1000);\r\n\r\n        frequencyPicker.disable();\r\n        await frequencyPicker.showCorrectAnswer(currentItem.boostedFreq);\r\n        await waitFor(1000);\r\n\r\n        showResultModal = true;\r\n    }\r\n\r\n    function handleAudioTick() {\r\n        audioRms = audioPlayer.currentRms;\r\n        audioWaveform = audioPlayer.currentWaveform;\r\n    }\r\n\r\n    async function handleNextRound() {\r\n        showResultModal = false;\r\n        currentItem = genItem();\r\n\r\n        await frequencyPicker.hideCorrectAnswer();\r\n        frequencyPicker.enable();\r\n        audioPlayer.start();\r\n    }\r\n\r\n    async function handleStartBtnClick() {        \r\n        showStartModal = false;\r\n\r\n        await frequencyPicker.playInitialAnimation();\r\n        frequencyPicker.enable();\r\n        audioPlayer.start();\r\n    }\r\n\r\n    // Helpers //\r\n\r\n    function waitFor(delay) {\r\n        return new Promise(resolve => setTimeout(resolve, delay));\r\n    }\r\n</script>\r\n\r\n<style>\r\n    .game_screen {\r\n        height: 100vh;\r\n        overflow: hidden;\r\n        \r\n        display: flex;\r\n        justify-content: center;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        gap: 2.5em;\r\n\r\n        /* Dark mode potential? #20252e */\r\n        background-color: #f5f5f5;\r\n    }\r\n</style>\r\n\r\n<div class=\"game_screen\">\r\n    <FrequencyPicker\r\n        bind:frequency={inputFrequency}\r\n        bind:this={frequencyPicker}\r\n        currentWaveform={audioWaveform}\r\n        currentWaveformRms={audioRms}\r\n        min={MIN_FREQ}\r\n        max={MAX_FREQ}\r\n    />\r\n\r\n    <Button on:click={handleAnswerSelect}>Select Frequency!</Button>\r\n\r\n    {#if showResultModal}\r\n        <ResultModal\r\n            answeredFreq={inputFrequency}\r\n            correctFreq={currentItem.boostedFreq}\r\n            on:tryAgainBtnClick={handleNextRound}\r\n        />\r\n    {/if}\r\n\r\n    {#if showStartModal}\r\n        <StartModal on:startBtnClick={handleStartBtnClick} />\r\n    {/if}\r\n</div>","<style>\r\n    .button {\r\n        padding: 0.9em 2.2em;\r\n\r\n        color: white;\r\n        font-family: Raleway, sans-serif;\r\n        font-size: 1.1em;\r\n        text-shadow: 0 0 0.3rem #ffffff80;\r\n\r\n        background-color: #6e6e6e;\r\n        border: none;\r\n        border-radius: 0.35rem;\r\n        box-shadow: inset 0 0 0.35rem 0 #b4b4b4bf;\r\n\r\n        transition: scale 50ms ease-in-out;\r\n    }\r\n\r\n    .button:hover {\r\n        filter: brightness(1.1);\r\n    }\r\n\r\n    .button:active {\r\n        filter: brightness(0.8);\r\n        scale: 0.95;\r\n    }\r\n</style>\r\n\r\n<button class=\"button\" on:click>\r\n    <slot></slot>\r\n</button>","<script>\r\n    import FrequencyDisplay from './FrequencyDisplay.svelte';\r\n    import FrequencySlider from './FrequencySlider.svelte';\r\n    \r\n    export let currentWaveform = [];\r\n    export let currentWaveformRms = 1;\r\n    export let frequency = 1000;\r\n    export let max = 24000;\r\n    export let min = 20;\r\n    \r\n    let disabled = true;\r\n\r\n    let frequencyDisplay;\r\n\r\n    // Exports //\r\n\r\n    export function disable() {\r\n        disabled = true;\r\n    }\r\n\r\n    export function enable() {\r\n        disabled = false;\r\n    }\r\n\r\n    export async function hideCorrectAnswer() {\r\n        await frequencyDisplay.hideCorrectAnswer();\r\n    }\r\n\r\n    export async function playInitialAnimation() {\r\n        await frequencyDisplay.playInitialAnimation();\r\n    }\r\n\r\n    export async function showCorrectAnswer(correctFreq) {\r\n        await frequencyDisplay.showCorrectAnswer(correctFreq);\r\n    }\r\n</script>\r\n\r\n<style>\r\n    .frequency_picker {\r\n        width: min(85vw, 83rem);\r\n        height: 17rem;\r\n\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 2.25rem;\r\n    }\r\n</style>\r\n\r\n<div class=\"frequency_picker\">\r\n    <FrequencyDisplay\r\n        bind:this={frequencyDisplay}\r\n        {currentWaveform}\r\n        {currentWaveformRms}\r\n        {max}\r\n        {min}\r\n        value={frequency}\r\n    />\r\n\r\n    <FrequencySlider \r\n        bind:value={frequency} \r\n        {disabled}\r\n        {max} \r\n        {min} \r\n    />\r\n</div>","<script>\r\n    import { logScaleFrequency } from '../js/frequencyTransforms';\r\n    import { interp } from '../js/interp';\r\n    import { transitionend } from '../js/transitionend';\r\n\r\n    import AudioViz from './AudioViz.svelte';\r\n    import Markings from './Markings.svelte';\r\n    import Wave from './Wave.svelte';\r\n    import Wave2 from './Wave2.svelte';\r\n\r\n    const MARKED_FREQUENCIES = \r\n        [50, 100, 200, 300, 500, 1000, 2000, 3000, 5000, 10000, 20000];\r\n\r\n    export let currentWaveform = [];\r\n    export let currentWaveformRms = 1;\r\n    export let max = 24000;\r\n    export let min = 20;\r\n    export let value = 1000;\r\n\r\n    let hideAnswerWave = true;\r\n    let hideFrequencyText = true;\r\n    let hideMainWave = true;\r\n    let lowerMainWave = false;\r\n    let scaledCorrectFrequency = null;\r\n\r\n    let frequencyText;\r\n    let mainWave;\r\n\r\n    $: includedMarkedFreqs = MARKED_FREQUENCIES.filter(f => f >= min && f <= max);\r\n    $: scaledFrequency = logScaleFrequency(value, min, max);\r\n\r\n    // Exports //\r\n\r\n    export async function hideCorrectAnswer() {\r\n        lowerMainWave = false;\r\n        hideAnswerWave = true;\r\n        await mainWave.transitionend();\r\n    }\r\n\r\n    export async function playInitialAnimation() {\r\n        hideMainWave = false;\r\n        await mainWave.transitionend();\r\n\r\n        hideFrequencyText = false;\r\n        await transitionend(frequencyText);\r\n    }\r\n\r\n    export async function showCorrectAnswer(correctFreq) {\r\n        hideAnswerWave = false;\r\n\r\n        scaledCorrectFrequency = scaledFrequency;\r\n        lowerMainWave = true;\r\n        await interp(\r\n            scaledFrequency, \r\n            logScaleFrequency(correctFreq, min, max), \r\n            600, \r\n            v => scaledCorrectFrequency = v, \r\n            t => t ** 2\r\n        );\r\n    }\r\n\r\n    // Helpers //\r\n\r\n    function getBgColor(scaledFrequency) {\r\n        return `hsl(${scaledFrequency * 300}, 35%, 45%)`;\r\n    }\r\n    \r\n    function getBgElemColor(scaledFrequency) {\r\n        return `hsl(${scaledFrequency * 300}, 40%, 57%)`;\r\n    }\r\n\r\n    function getFreqColor(scaledFrequency) {\r\n        return `hsl(${scaledFrequency * 300}, 93%, 70%)`;\r\n    }\r\n</script>\r\n\r\n<style module>\r\n    :global(.audio_viz-lhUWq7) {\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n    \r\n    :global(.frequency_display-1eq4JI) {\r\n        position: relative;\r\n\r\n        height: 17rem;\r\n        overflow: hidden;\r\n\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n\r\n        background-color: var(--color);\r\n        border-radius: 0.35rem;\r\n    }\r\n\r\n    :global(.frequency_display-1eq4JI::after) {\r\n        content: '';\r\n\r\n        position: absolute;\r\n        inset: 0;\r\n\r\n        /* Let the inner glow go above all the other elements. */\r\n        box-shadow: inset 0 0 0.8rem 0 rgb(255 255 255 / 0.5);\r\n    }\r\n\r\n    :global(.frequency_display-1eq4JI > *) {\r\n        position: absolute;\r\n    }\r\n\r\n    :global(.frequency_text-3ALPXl) {        \r\n        color: white;\r\n        font-family: Raleway, sans-serif;\r\n        font-size: 3.65em;\r\n        font-weight: bold;\r\n        text-shadow : 0 0 0.2rem rgb(255 255 255 / 0.5);\r\n        \r\n        user-select: none;\r\n\r\n        transition: opacity 800ms ease-out;\r\n    }\r\n\r\n    :global(.frequency_text-3ALPXl.hidden-2AqiZl) {\r\n        opacity: 0;\r\n    }\r\n\r\n    :global(.markings-3u7Scn) {\r\n        inset: 0;\r\n    }\r\n\r\n    :global(.wave-tmxR-U) {\r\n        height: 93%;\r\n        bottom: 0;\r\n\r\n        left: var(--x);\r\n        translate: -50%;\r\n\r\n        transition: height 500ms ease-out;\r\n    }\r\n\r\n    :global(.wave-tmxR-U.hidden-2AqiZl) {\r\n        height: 0%;\r\n    }\r\n\r\n    :global(.wave-tmxR-U.lowered-1gZi9m) {\r\n        height: 55%;\r\n    }\r\n</style>\r\n\r\n<div \r\n    class=\"frequency_display-1eq4JI\"\r\n    style=\"--color: {getBgColor(scaledFrequency)};\"\r\n>\r\n    <AudioViz\r\n        class=\"audio_viz-lhUWq7\"\r\n        color={getBgElemColor(scaledFrequency)}\r\n        rms={currentWaveformRms}\r\n        waveform={currentWaveform}\r\n    />\r\n\r\n    <Markings\r\n        class=\"markings-3u7Scn\"\r\n        at={includedMarkedFreqs.map(f => logScaleFrequency(f, min, max))}\r\n        color={getBgElemColor(scaledFrequency)}\r\n    />\r\n\r\n    <Wave2\r\n        class=\"wave-tmxR-U {hideAnswerWave ? 'hidden-2AqiZl' : ''}\"\r\n        style=\"--x: {scaledCorrectFrequency * 100}%;\"\r\n        color={getFreqColor(scaledCorrectFrequency)}\r\n    />\r\n\r\n    <Wave\r\n        bind:this={mainWave}\r\n        class=\"wave-tmxR-U {hideMainWave ? 'hidden-2AqiZl' : ''} {lowerMainWave ? 'lowered-1gZi9m' : ''}\"\r\n        style=\"--x: {scaledFrequency * 100}%;\"\r\n        color={getFreqColor(scaledFrequency)}\r\n    />\r\n\r\n    <p \r\n        class=\"frequency_text-3ALPXl\" \r\n        class:hidden-2AqiZl={hideFrequencyText}\r\n        bind:this={frequencyText} \r\n    >\r\n        {Math.round(value)} Hz\r\n    </p>\r\n</div>","<script>   \r\n    export let at = [];\r\n    export let color = 'white';\r\n</script>\r\n\r\n<style>\r\n    .marking {\r\n        width: 0.25rem;\r\n        height: 100%;\r\n        \r\n        position: absolute;\r\n        translate: -50% 0;\r\n        left: var(--x);\r\n        \r\n        background: var(--color);\r\n        box-shadow: 0 0 0.25rem 0 var(--color);\r\n    }\r\n</style>\r\n\r\n<div class=\"markings {$$props.class}\">\r\n    {#each at as xRatio}\r\n        <span \r\n            class=\"marking\" \r\n            style=\"--color: {color}; --x: {xRatio * 100}%;\"\r\n        ></span>\r\n    {/each}\r\n</div>","<script>\r\n    import chroma from 'chroma-js';\r\n\r\n    import { transitionend as transitionendUtil } from '../js/transitionend';\r\n\r\n    export let color = 'white';\r\n\r\n    let svgElem;\r\n\r\n    $: glowColor = chroma(color).brighten(1.5).alpha(0.75);\r\n\r\n    // Exports //\r\n\r\n    export async function transitionend() {\r\n        await transitionendUtil(svgElem);\r\n    }\r\n</script>\r\n\r\n<style>\r\n    svg {\r\n        opacity: 0.9;\r\n    }\r\n</style>\r\n\r\n<svg \r\n    bind:this={svgElem}\r\n    class=\"{$$props.class}\"\r\n    style=\"{$$props.style}\"\r\n\r\n    width=\"100%\" \r\n    height=\"100%\" \r\n    viewBox=\"0 0 782 235\" \r\n    preserveAspectRatio=\"none\" \r\n    \r\n    xmlns=\"http://www.w3.org/2000/svg\" \r\n>\r\n    <defs>\r\n        <!-- From https://codepen.io/mathiesjanssen/pen/QgLzmM -->\r\n        <filter id=\"inset-shadow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\r\n            <feComponentTransfer in=SourceAlpha>\r\n              <feFuncA type=\"table\" tableValues=\"1 0\" />\r\n            </feComponentTransfer>\r\n            <feGaussianBlur stdDeviation=\"4\"/>\r\n            <feOffset dx=\"0\" dy=\"0\" result=\"offsetblur\"/>\r\n            <feFlood flood-color=\"{glowColor}\" result=\"color\"/>\r\n            <feComposite in2=\"offsetblur\" operator=\"in\"/>\r\n            <feComposite in2=\"SourceAlpha\" operator=\"in\" />\r\n            <feMerge>\r\n              <feMergeNode in=\"SourceGraphic\" />\r\n              <feMergeNode />\r\n            </feMerge>\r\n          </filter>\r\n    </defs>\r\n\r\n    <g transform=\"matrix(1,0,0,1,-56,-192.917)\">\r\n        <g transform=\"matrix(0.999835,0,0,2.76822,0.00895685,-566.03)\">\r\n            <path style=\"fill: {color};\" filter=\"url(#inset-shadow)\" d=\"M831.535,358.95C831.535,358.95 625.492,358.372 604,357.5C584.699,356.435 553.436,355.365 524.938,347.229C505.85,341.638 489.597,330.425 480,317C470.652,307.447 461.213,276 448,276C435.534,276 425.348,307.447 416,317C406.403,330.425 390.15,341.638 371.062,347.229C342.564,355.365 311.301,356.435 292,357.5C270.508,358.372 54.407,359.086 54.407,359.086\" />\r\n            <!-- <path style=\"fill: {color};\" d=\"M831.535,358.95C831.535,358.95 739.69,358.504 672.251,357.944C638.8,357.667 611.364,357.364 604.176,357.063C593.298,356.445 578.616,355.82 562.795,353.916C550.776,352.469 538.093,350.28 525.938,346.781C517.407,344.264 509.482,340.596 502.48,336.104C494.044,330.691 486.962,324.084 481.84,316.828C481.826,316.809 481.81,316.79 481.791,316.771C475.336,310.137 468.917,292.94 461.138,283.063C458.754,280.036 456.184,277.679 453.529,276.444C451.775,275.628 449.857,275.248 448,275.248C446.189,275.248 444.271,275.643 442.527,276.504C439.992,277.756 437.496,280.115 435.142,283.13C427.42,293.018 420.669,310.154 414.232,316.774C414.214,316.793 414.198,316.812 414.185,316.831C409.063,324.087 401.979,330.695 393.544,336.109C386.541,340.603 378.619,344.274 370.087,346.792C357.926,350.291 345.236,352.478 333.213,353.925C317.39,355.828 302.707,356.453 291.838,357.07C284.635,357.372 255.875,357.689 220.732,357.987C150.351,358.582 54.407,359.086 54.407,359.086C54.407,359.086 150.366,358.956 220.764,358.612C256.066,358.44 284.948,358.21 292.134,357.931C292.15,357.931 292.166,357.93 292.181,357.929C303.18,357.34 318.039,356.754 334.08,354.878C346.437,353.432 359.485,351.221 372.025,347.669C372.03,347.668 372.035,347.666 372.04,347.665C380.898,345.09 389.185,341.334 396.498,336.714C405.162,331.24 412.466,324.55 417.794,317.199C424.312,310.554 431.321,293.427 439.124,283.538C440.958,281.214 442.816,279.298 444.751,278.043C445.458,277.585 446.155,277.222 446.878,276.98C447.262,276.852 447.606,276.752 448,276.752C448.428,276.752 448.817,276.844 449.229,276.971C449.978,277.203 450.694,277.555 451.416,278.002C453.419,279.243 455.309,281.151 457.154,283.474C465.004,293.355 471.658,310.548 478.186,317.206C483.51,324.554 490.816,331.244 499.478,336.719C506.791,341.341 515.076,345.099 523.935,347.676C523.94,347.677 523.945,347.679 523.95,347.68C536.497,351.232 549.551,353.442 561.912,354.887C577.956,356.762 592.815,357.348 603.815,357.937C603.831,357.938 603.847,357.939 603.863,357.939C611.021,358.216 638.592,358.428 672.219,358.579C739.676,358.881 831.535,358.95 831.535,358.95Z\" /> -->\r\n        </g>\r\n    </g>\r\n</svg>","<script>\r\n    import chroma from 'chroma-js';\r\n\r\n    import { transitionend as transitionendUtil } from '../js/transitionend';\r\n\r\n    export let color = 'white';\r\n\r\n    let svgElem;\r\n\r\n    $: glowColor = chroma(color).brighten(1.5).alpha(0.75);\r\n\r\n    // Exports //\r\n\r\n    export async function transitionend() {\r\n        await transitionendUtil(svgElem);\r\n    }\r\n</script>\r\n\r\n<style>\r\n    svg {\r\n        opacity: 0.9;\r\n    }\r\n</style>\r\n\r\n<svg \r\n    bind:this={svgElem}\r\n    class=\"{$$props.class}\"\r\n    style=\"{$$props.style}\"\r\n\r\n    width=\"100%\" \r\n    height=\"100%\" \r\n    viewBox=\"0 0 782 235\" \r\n    preserveAspectRatio=\"none\" \r\n    \r\n    xmlns=\"http://www.w3.org/2000/svg\" \r\n>\r\n    <defs>\r\n        <!-- From https://codepen.io/mathiesjanssen/pen/QgLzmM -->\r\n        <filter id=\"inset-shadow-2\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\r\n            <feComponentTransfer in=SourceAlpha>\r\n              <feFuncA type=\"table\" tableValues=\"1 0\" />\r\n            </feComponentTransfer>\r\n            <feGaussianBlur stdDeviation=\"4\"/>\r\n            <feOffset dx=\"0\" dy=\"0\" result=\"offsetblur\"/>\r\n            <feFlood flood-color=\"{glowColor}\" result=\"color\"/>\r\n            <feComposite in2=\"offsetblur\" operator=\"in\"/>\r\n            <feComposite in2=\"SourceAlpha\" operator=\"in\" />\r\n            <feMerge>\r\n              <feMergeNode in=\"SourceGraphic\" />\r\n              <feMergeNode />\r\n            </feMerge>\r\n          </filter>\r\n    </defs>\r\n\r\n    <g transform=\"matrix(1,0,0,1,-56,-192.917)\">\r\n        <g transform=\"matrix(0.999835,0,0,2.76822,0.00895685,-566.03)\">\r\n            <path style=\"fill: {color};\" filter=\"url(#inset-shadow-2)\" d=\"M831.535,358.95C831.535,358.95 625.492,358.372 604,357.5C584.699,356.435 553.436,355.365 524.938,347.229C505.85,341.638 489.597,330.425 480,317C470.652,307.447 461.213,276 448,276C435.534,276 425.348,307.447 416,317C406.403,330.425 390.15,341.638 371.062,347.229C342.564,355.365 311.301,356.435 292,357.5C270.508,358.372 54.407,359.086 54.407,359.086\" />\r\n            <!-- <path style=\"fill: {color};\" d=\"M831.535,358.95C831.535,358.95 739.69,358.504 672.251,357.944C638.8,357.667 611.364,357.364 604.176,357.063C593.298,356.445 578.616,355.82 562.795,353.916C550.776,352.469 538.093,350.28 525.938,346.781C517.407,344.264 509.482,340.596 502.48,336.104C494.044,330.691 486.962,324.084 481.84,316.828C481.826,316.809 481.81,316.79 481.791,316.771C475.336,310.137 468.917,292.94 461.138,283.063C458.754,280.036 456.184,277.679 453.529,276.444C451.775,275.628 449.857,275.248 448,275.248C446.189,275.248 444.271,275.643 442.527,276.504C439.992,277.756 437.496,280.115 435.142,283.13C427.42,293.018 420.669,310.154 414.232,316.774C414.214,316.793 414.198,316.812 414.185,316.831C409.063,324.087 401.979,330.695 393.544,336.109C386.541,340.603 378.619,344.274 370.087,346.792C357.926,350.291 345.236,352.478 333.213,353.925C317.39,355.828 302.707,356.453 291.838,357.07C284.635,357.372 255.875,357.689 220.732,357.987C150.351,358.582 54.407,359.086 54.407,359.086C54.407,359.086 150.366,358.956 220.764,358.612C256.066,358.44 284.948,358.21 292.134,357.931C292.15,357.931 292.166,357.93 292.181,357.929C303.18,357.34 318.039,356.754 334.08,354.878C346.437,353.432 359.485,351.221 372.025,347.669C372.03,347.668 372.035,347.666 372.04,347.665C380.898,345.09 389.185,341.334 396.498,336.714C405.162,331.24 412.466,324.55 417.794,317.199C424.312,310.554 431.321,293.427 439.124,283.538C440.958,281.214 442.816,279.298 444.751,278.043C445.458,277.585 446.155,277.222 446.878,276.98C447.262,276.852 447.606,276.752 448,276.752C448.428,276.752 448.817,276.844 449.229,276.971C449.978,277.203 450.694,277.555 451.416,278.002C453.419,279.243 455.309,281.151 457.154,283.474C465.004,293.355 471.658,310.548 478.186,317.206C483.51,324.554 490.816,331.244 499.478,336.719C506.791,341.341 515.076,345.099 523.935,347.676C523.94,347.677 523.945,347.679 523.95,347.68C536.497,351.232 549.551,353.442 561.912,354.887C577.956,356.762 592.815,357.348 603.815,357.937C603.831,357.938 603.847,357.939 603.863,357.939C611.021,358.216 638.592,358.428 672.219,358.579C739.676,358.881 831.535,358.95 831.535,358.95Z\" /> -->\r\n        </g>\r\n    </g>\r\n</svg>","<script>\r\n    import chroma from 'chroma-js';\r\n    import { createEventDispatcher, onMount, tick } from 'svelte';\r\n    const dispatch = createEventDispatcher();\r\n    \r\n    export let color = 'white';\r\n    export let disabled = false;\r\n    export let min = 0\r\n    export let max = 100;\r\n    export let transform = { toValue: linearToValue, toRatio: linearToRatio };\r\n    export let value = 50;\r\n    \r\n    let isDragging = false;\r\n    let dragXOffset = 0;\r\n\r\n    // Can't cleanly do this with computed state due to their nature.\r\n    let progressRatio = transform.toRatio(value, min, max);\r\n    let renderRatio = 0;\r\n\r\n    let sliderElem;\r\n    let thumbElem;\r\n\r\n    onMount(async () => {\r\n        await tick();\r\n        renderRatio = computeRenderRatio(progressRatio);\r\n    });\r\n\r\n    // Handlers //\r\n\r\n    function handleThumbDown(pointerX) {\r\n        if (disabled) {\r\n            return;\r\n        }\r\n\r\n        isDragging = true;\r\n\r\n        // Drag the thumb by the point where it was clicked/touched.\r\n        const { x: thumbX } = thumbElem.getBoundingClientRect();\r\n        dragXOffset = pointerX - thumbX;\r\n    }\r\n\r\n    function handleThumbMove(pointerX) {\r\n        if (isDragging) {\r\n            setRatios(computeValueRatio(pointerX - dragXOffset));\r\n        }\r\n    }\r\n\r\n    function handleThumbUp() {\r\n        isDragging = false;\r\n        dragXOffset = 0;\r\n    }\r\n\r\n    function handleTrackPress(pointerX, target) {\r\n        if (disabled || target == thumbElem) {\r\n            return;\r\n        }\r\n\r\n        const { width: thumbWidth } = thumbElem.getBoundingClientRect();\r\n        setRatios(computeValueRatio(pointerX - thumbWidth / 2));\r\n\r\n        // Allow the thumb to be dragged immediately after changing its position\r\n        // via just clicking/touching the track.\r\n        isDragging = true;\r\n        dragXOffset = thumbWidth / 2;\r\n    }\r\n\r\n    // Helpers //\r\n\r\n    function clamp(val, min, max) {\r\n        return Math.min(Math.max(val, min), max);\r\n    }\r\n\r\n    function computeRenderRatio(ratio) {\r\n        const { width: sliderWidth } = sliderElem.getBoundingClientRect();\r\n        const { width: thumbWidth } = thumbElem.getBoundingClientRect();\r\n\r\n        // Setting left: alignRatio would move the leftmost part of the thumb\r\n        // to the leftmost edge of the track.\r\n        const alignRatio = (thumbWidth / 2) / sliderWidth;\r\n        return ratio * (1 - 2 * alignRatio) + alignRatio;\r\n    }\r\n\r\n    /**\r\n     * Represents how much the leftmost side of the thumb has travelled along the \r\n     * track.\r\n     */\r\n    function computeValueRatio(thumbX) {\r\n        const { x: sliderX } = sliderElem.getBoundingClientRect();\r\n\r\n        const ratio = (thumbX - sliderX) / getSlidableTrackWidth();\r\n        return clamp(ratio, 0, 1);\r\n    }\r\n\r\n    /**\r\n     * Ensures that the center of the thumb is aligned with the edges of the track\r\n     * at not only the minimum but also the maximum value.\r\n     */\r\n    function getSlidableTrackWidth() {\r\n        const { width: sliderWidth } = sliderElem.getBoundingClientRect();\r\n        const { width: thumbWidth } = thumbElem.getBoundingClientRect(); \r\n\r\n        return sliderWidth - thumbWidth;\r\n    }\r\n\r\n    function linearToRatio(value, min, max) {\r\n        return (value - min) / (max - min);\r\n    }\r\n\r\n    function linearToValue(ratio, min, max) {\r\n        return ratio * (max - min) + min;\r\n    }\r\n\r\n    function setRatios(progressRatio) {\r\n        progressRatio = progressRatio;\r\n\r\n        value = transform.toValue(progressRatio, min, max);\r\n        renderRatio = computeRenderRatio(progressRatio);\r\n\r\n        dispatch('slide', value);\r\n    }\r\n</script>\r\n\r\n<style>\r\n    .slider {\r\n        position: relative;\r\n\r\n        width: 100%;\r\n        height: 0.75rem;\r\n\r\n        background-color: #b5b5b5;\r\n        border-radius: 0.2rem;\r\n        box-shadow: inset 0 0 0.35rem 0 #ffffffbf;\r\n    }\r\n\r\n    .thumb {\r\n        position: absolute;\r\n        left: var(--x);\r\n\r\n        /* Anchor the thumb at its center. No idea why an extra 1% is needed to \r\n        align the thumb at the edges of the track correctly. */\r\n        top: 50%;\r\n        translate: -51% -50%;\r\n\r\n        width: 2.55rem;\r\n        height: 2.55rem;\r\n\r\n        cursor: pointer;\r\n        \r\n        /* No highlighting in webkit browsers for touchscreen devices */\r\n        -webkit-tap-highlight-color: transparent;\r\n    }\r\n\r\n    .thumb.disabled {\r\n        cursor: auto;\r\n    }\r\n\r\n    /* Need to use pseudoelements to implement stroke and fill as box-shadow\r\n    can't be invidiually applied on them otherwise. */\r\n    .thumb::before, .thumb::after {\r\n        content: '';\r\n\r\n        position: absolute;\r\n        border-radius: 50%;\r\n    }\r\n\r\n    /* Stroke */\r\n    .thumb::before {\r\n        inset: 0;\r\n\r\n        background: #6e6e6e;\r\n        box-shadow: inset 0 0 0.35rem 0 #b4b4b4bf;\r\n    }\r\n\r\n    /* Fill */\r\n    .thumb::after {\r\n        inset: 0.52rem;\r\n\r\n        background: var(--color);\r\n        box-shadow: inset 0 0 0.35rem 0 var(--glow-color);\r\n    }\r\n</style>\r\n\r\n<svelte:window \r\n    on:mousemove={({ clientX }) => handleThumbMove(clientX)}\r\n    on:mouseup={handleThumbUp}\r\n    on:touchmove={({ targetTouches }) => handleThumbMove(targetTouches[0].clientX)}\r\n    on:touchend={handleThumbUp}\r\n/>\r\n\r\n<div \r\n    bind:this={sliderElem} \r\n    class=\"slider\" \r\n    on:mousedown={({ clientX, target }) => handleTrackPress(clientX, target)}\r\n    on:touchstart={({ target, targetTouches }) => handleTrackPress(targetTouches[0].clientX, target)}\r\n>\r\n    <!-- Can't use the drag event since it sets the cursor position to (0, 0)\r\n    upon ending the drag and there seems to be no way to detect such an end\r\n    state and ignore it accordingly. -->\r\n    <span \r\n        bind:this={thumbElem}\r\n        class=\"thumb\"\r\n        class:disabled\r\n        style=\"\r\n            --color: {color};\r\n            --glow-color: {chroma(color).brighten(1.5).alpha(0.75)};\r\n            --x: {renderRatio * 100}%;\"\r\n        aria-valuenow={value}\r\n        aria-valuemax={max}\r\n        aria-valuemin={min}\r\n        role=\"slider\"\r\n        on:mousedown={({ clientX }) => handleThumbDown(clientX) }\r\n        on:touchstart={({ targetTouches }) => handleThumbDown(targetTouches[0].clientX)}\r\n    ></span>\r\n</div>","<script>\r\n    import { createEventDispatcher } from 'svelte';\r\n    const dispatch = createEventDispatcher();\r\n    \r\n    import Button from './Button.svelte';\r\n    import Modal from './Modal.svelte';\r\n    \r\n    export let answeredFreq;\r\n    export let correctFreq;\r\n\r\n    $: dFreq = correctFreq - answeredFreq;\r\n    $: dFreqPercent = 100 * dFreq / answeredFreq;\r\n\r\n    $: dFreqRounded = Math.round(dFreq);\r\n    $: dFreqPercentRounded = Math.round(dFreqPercent);\r\n</script>\r\n\r\n<style>\r\n    .correct_freq {\r\n        margin-bottom: 0.175em;\r\n\r\n        font-size: 3em;\r\n        font-weight: bold;\r\n        text-shadow: 0 0 0.3rem #ffffff80;\r\n    }\r\n\r\n    .dist_stats {\r\n        font-size: 1.5em;\r\n        font-weight: bold;\r\n        text-shadow: 0 0 0.2rem #ffffff80;\r\n    }\r\n\r\n    .heading {\r\n        font-size: 1.5em;\r\n        font-weight: normal;\r\n    }\r\n\r\n    .text_container {\r\n        margin: 1.25em 0 2em 0;\r\n    }\r\n</style>\r\n\r\n<Modal class=\"result_modal\">\r\n    <h1 class=\"heading\">Correct Frequency:</h1>\r\n\r\n    <div class=\"text_container\">\r\n        <p class=\"correct_freq\">{correctFreq} Hz</p>\r\n        <p class=\"dist_stats\">{dFreqRounded} Hz ({dFreqPercentRounded}%) Off</p>\r\n    </div>\r\n\r\n    <Button on:click={() => dispatch('tryAgainBtnClick')}>Try Again!</Button>\r\n</Modal>","<script>\r\n    import { fade } from 'svelte/transition';\r\n</script>\r\n\r\n<style>\r\n    .modal {\r\n        position: fixed;\r\n        \r\n        max-width: 26rem;\r\n        margin: 1.25rem;\r\n        padding: 2.75em;\r\n\r\n        display: flex;\r\n        flex-direction: column;\r\n\r\n        color: white;\r\n        font-family: Raleway, sans-serif;\r\n        text-align: center;\r\n\r\n        background-color: #060505e8;\r\n        border-radius: 0.35rem;\r\n        box-shadow: inset 0 0 0.8rem #ffffff80, 0 0 0 100vw #00000050;\r\n    }\r\n</style>\r\n\r\n<div class=\"modal {$$props.class}\" transition:fade={{ duration: 650 }}>\r\n    <slot></slot>\r\n</div>","<script>\r\n    import { createEventDispatcher } from 'svelte';\r\n    const dispatch = createEventDispatcher();\r\n    \r\n    import Button from './Button.svelte';\r\n    import Modal from './Modal.svelte';\r\n</script>\r\n\r\n<style>\r\n    .description {\r\n        margin: 2em 0 1.75em 0;\r\n\r\n        font-size: 1.2em;\r\n    }\r\n\r\n    .heading {\r\n        font-size: 2.5em;\r\n        text-shadow: 0 0 0.3rem #ffffff80;\r\n    }\r\n\r\n    .link {\r\n        color: white;\r\n        font-weight: bold;\r\n    }\r\n</style>\r\n\r\n<Modal>\r\n    <h1 class=\"heading\">eq-trainer</h1>\r\n\r\n    <p class=\"description\">\r\n        Train yourself to recognize frequencies by listening to a pink noise\r\n        sample and estimating its boosted frequency. Inspiration from\r\n        <a class=\"link\" href=\"https://www.youtube.com/watch?v=0fckQLQWhe0\">this video</a>\r\n        by Audio University.\r\n    </p>\r\n\r\n    <Button on:click={() => dispatch('startBtnClick')}>Let's Start!</Button>\r\n</Modal>"],"names":[],"version":3,"file":"index.91a1d422.css.map"}